<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/entities/Machine.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/entities/Machine.java" />
              <option name="originalContent" value="package entities;&#10;&#10;import java.util.Date;&#10;import javax.persistence.*;&#10;&#10;@Entity&#10;@NamedNativeQuery(name = &quot;findBetweenDateNative&quot;, query = &quot;select * from machine where dateAchat between :d1 and :d2&quot;, resultClass = Machine.class)&#10;@NamedQuery(name = &quot;findBetweenDate&quot;, query = &quot;from Machine where dateAchat between :d1 and :d2&quot;)&#10;public class Machine {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private int id;&#10;    private String ref;&#10;&#10;    @Temporal(TemporalType.DATE)&#10;    private Date dateAchat;&#10;&#10;    @ManyToOne&#10;    private Salle salle;&#10;&#10;    // Constructeurs, getters et setters&#10;}" />
              <option name="updatedContent" value="package entities;&#10;&#10;import java.util.Date;&#10;import javax.persistence.*;&#10;&#10;@Entity&#10;@NamedNativeQuery(name = &quot;findBetweenDateNative&quot;, query = &quot;select * from machine where dateAchat between :d1 and :d2&quot;, resultClass = Machine.class)&#10;@NamedQuery(name = &quot;findBetweenDate&quot;, query = &quot;from Machine where dateAchat between :d1 and :d2&quot;)&#10;public class Machine {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private int id;&#10;    private String ref;&#10;&#10;    @Temporal(TemporalType.DATE)&#10;    private Date dateAchat;&#10;&#10;    @ManyToOne&#10;    private Salle salle;&#10;&#10;    // Default constructor&#10;    public Machine() {}&#10;&#10;    // Constructor with parameters&#10;    public Machine(String ref, Date dateAchat, Salle salle) {&#10;        this.ref = ref;&#10;        this.dateAchat = dateAchat;&#10;        this.salle = salle;&#10;    }&#10;&#10;    // Getters and setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getRef() {&#10;        return ref;&#10;    }&#10;&#10;    public void setRef(String ref) {&#10;        this.ref = ref;&#10;    }&#10;&#10;    public Date getDateAchat() {&#10;        return dateAchat;&#10;    }&#10;&#10;    public void setDateAchat(Date dateAchat) {&#10;        this.dateAchat = dateAchat;&#10;    }&#10;&#10;    public Salle getSalle() {&#10;        return salle;&#10;    }&#10;&#10;    public void setSalle(Salle salle) {&#10;        this.salle = salle;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/entities/Salle.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/entities/Salle.java" />
              <option name="originalContent" value="package entities;&#10;&#10;import java.util.List;&#10;import javax.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;salles&quot;)&#10;public class Salle {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private int id;&#10;    private String code;&#10;&#10;    @OneToMany(mappedBy = &quot;salle&quot;, fetch = FetchType.EAGER)&#10;    private List&lt;Machine&gt; machines;&#10;&#10;    // Constructeurs, getters et setters&#10;}" />
              <option name="updatedContent" value="package entities;&#10;&#10;import java.util.List;&#10;import javax.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;salles&quot;)&#10;public class Salle {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private int id;&#10;    private String code;&#10;&#10;    @OneToMany(mappedBy = &quot;salle&quot;, fetch = FetchType.EAGER)&#10;    private List&lt;Machine&gt; machines;&#10;&#10;    // Default constructor&#10;    public Salle() {}&#10;&#10;    // Constructor with parameters&#10;    public Salle(String code) {&#10;        this.code = code;&#10;    }&#10;&#10;    // Getters and setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getCode() {&#10;        return code;&#10;    }&#10;&#10;    public void setCode(String code) {&#10;        this.code = code;&#10;    }&#10;&#10;    public List&lt;Machine&gt; getMachines() {&#10;        return machines;&#10;    }&#10;&#10;    public void setMachines(List&lt;Machine&gt; machines) {&#10;        this.machines = machines;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/services/MachineService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/services/MachineService.java" />
              <option name="originalContent" value="package services;&#10;&#10;import dao.IDao;&#10;import entities.Machine;&#10;import org.hibernate.HibernateException;&#10;import org.hibernate.Session;&#10;import org.hibernate.Transaction;&#10;import util.HibernateUtil;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class MachineService implements IDao&lt;Machine&gt; {&#10;&#10;    @Override&#10;    public boolean create(Machine o) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        boolean etat = false;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            session.save(o);&#10;            tx.commit();&#10;            etat = true;&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return etat;&#10;    }&#10;&#10;    @Override&#10;    public boolean delete(Machine o) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        boolean etat = false;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            session.delete(o);&#10;            tx.commit();&#10;            etat = true;&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return etat;&#10;    }&#10;&#10;    @Override&#10;    public boolean update(Machine o) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        boolean etat = false;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            session.update(o);&#10;            tx.commit();&#10;            etat = true;&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return etat;&#10;    }&#10;&#10;    @Override&#10;    public Machine findById(int id) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        Machine machine = null;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            machine = session.get(Machine.class, id);&#10;            tx.commit();&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return machine;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Machine&gt; findAll() {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        List&lt;Machine&gt; machines = null;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            machines = session.createQuery(&quot;from Machine&quot;, Machine.class).list();&#10;            tx.commit();&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return machines;&#10;    }&#10;&#10;    public List&lt;Machine&gt; findBetweenDate(Date d1, Date d2) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        List&lt;Machine&gt; machines = null;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            machines = session.getNamedQuery(&quot;findBetweenDate&quot;)&#10;                    .setParameter(&quot;d1&quot;, d1)&#10;                    .setParameter(&quot;d2&quot;, d2)&#10;                    .list();&#10;            tx.commit();&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return machines;&#10;    }&#10;}" />
              <option name="updatedContent" value="package services;&#10;&#10;import dao.IDao;&#10;import entities.Machine;&#10;import org.hibernate.HibernateException;&#10;import org.hibernate.Session;&#10;import org.hibernate.Transaction;&#10;import util.HibernateUtil;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class MachineService implements IDao&lt;Machine&gt; {&#10;&#10;    @Override&#10;    public boolean create(Machine o) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        boolean etat = false;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            session.save(o);&#10;            tx.commit();&#10;            etat = true;&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return etat;&#10;    }&#10;&#10;    @Override&#10;    public boolean delete(Machine o) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        boolean etat = false;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            session.delete(o);&#10;            tx.commit();&#10;            etat = true;&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return etat;&#10;    }&#10;&#10;    @Override&#10;    public boolean update(Machine o) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        boolean etat = false;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            session.update(o);&#10;            tx.commit();&#10;            etat = true;&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return etat;&#10;    }&#10;&#10;    @Override&#10;    public Machine findById(int id) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        Machine machine = null;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            machine = session.get(Machine.class, id);&#10;            tx.commit();&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return machine;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Machine&gt; findAll() {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        List&lt;Machine&gt; machines = null;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            machines = session.createQuery(&quot;from Machine&quot;, Machine.class).list();&#10;            tx.commit();&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return machines;&#10;    }&#10;&#10;    public List&lt;Machine&gt; findBetweenDate(Date d1, Date d2) {&#10;        Session session = null;&#10;        Transaction tx = null;&#10;        List&lt;Machine&gt; machines = null;&#10;        try {&#10;            session = HibernateUtil.getSessionFactory().openSession();&#10;            tx = session.beginTransaction();&#10;            @SuppressWarnings(&quot;unchecked&quot;)&#10;            List&lt;Machine&gt; result = session.getNamedQuery(&quot;findBetweenDate&quot;)&#10;                    .setParameter(&quot;d1&quot;, d1)&#10;                    .setParameter(&quot;d2&quot;, d2)&#10;                    .list();&#10;            machines = result;&#10;            tx.commit();&#10;        } catch (HibernateException e) {&#10;            if(tx != null)&#10;                tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            if(session != null)&#10;                session.close();&#10;        }&#10;        return machines;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>